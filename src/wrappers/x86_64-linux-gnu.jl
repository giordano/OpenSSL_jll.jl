# Autogenerated wrapper script for OpenSSL_jll for x86_64-linux-gnu
export libcrypto, libssl, openssl

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"
LIBPATH_default = ""

# Relative path to `libcrypto`
const libcrypto_splitpath = ["lib", "libcrypto.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libcrypto_path = ""

# libcrypto-specific global declaration
# This will be filled out by __init__()
libcrypto_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libcrypto = "libcrypto.so.1.1"


# Relative path to `libssl`
const libssl_splitpath = ["lib", "libssl.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libssl_path = ""

# libssl-specific global declaration
# This will be filled out by __init__()
libssl_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libssl = "libssl.so.1.1"


# Relative path to `openssl`
const openssl_splitpath = ["bin", "openssl"]

# This will be filled out by __init__() for all products, as it must be done at runtime
openssl_path = ""

openssl(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true) =
    executable_wrapper(f, openssl_path, PATH, LIBPATH, LIBPATH_env, LIBPATH_default, ':', adjust_PATH, adjust_LIBPATH)

"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"OpenSSL")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list

    global openssl_path = get_exe_path!(PATH_list, artifact_dir, openssl_splitpath)

    global libssl_path, libssl_handle
    libssl_path, libssl_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libssl_splitpath)

    global libcrypto_path, libcrypto_handle
    libcrypto_path, libcrypto_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libcrypto_splitpath)

    global PATH, LIBPATH
    PATH, LIBPATH = cleanup_path_libpath!(PATH_list, LIBPATH_list, ':')
    
end  # __init__()

